syntax = "proto3";

package geniustechspace.payments.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/types.proto";

option go_package = "github.com/geniustechspace/api-contracts/gen/go/payments/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.payments.v1";

// PaymentService manages payments and transactions
service PaymentService {
  // Create payment intent
  rpc CreatePayment(CreatePaymentRequest) returns (CreatePaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payments"
      body: "*"
    };
  }

  // Get payment by ID
  rpc GetPayment(GetPaymentRequest) returns (GetPaymentResponse) {
    option (google.api.http) = {
      get: "/v1/payments/{payment_id}"
    };
  }

  // List payments
  rpc ListPayments(ListPaymentsRequest) returns (ListPaymentsResponse) {
    option (google.api.http) = {
      get: "/v1/payments"
    };
  }

  // Capture payment (for authorized payments)
  rpc CapturePayment(CapturePaymentRequest) returns (CapturePaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payments/{payment_id}/capture"
      body: "*"
    };
  }

  // Cancel payment
  rpc CancelPayment(CancelPaymentRequest) returns (CancelPaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payments/{payment_id}/cancel"
      body: "*"
    };
  }

  // Refund payment
  rpc RefundPayment(RefundPaymentRequest) returns (RefundPaymentResponse) {
    option (google.api.http) = {
      post: "/v1/payments/{payment_id}/refund"
      body: "*"
    };
  }

  // Add payment method
  rpc AddPaymentMethod(AddPaymentMethodRequest) returns (AddPaymentMethodResponse) {
    option (google.api.http) = {
      post: "/v1/payment-methods"
      body: "*"
    };
  }

  // Get payment method
  rpc GetPaymentMethod(GetPaymentMethodRequest) returns (GetPaymentMethodResponse) {
    option (google.api.http) = {
      get: "/v1/payment-methods/{payment_method_id}"
    };
  }

  // List payment methods
  rpc ListPaymentMethods(ListPaymentMethodsRequest) returns (ListPaymentMethodsResponse) {
    option (google.api.http) = {
      get: "/v1/payment-methods"
    };
  }

  // Delete payment method
  rpc DeletePaymentMethod(DeletePaymentMethodRequest) returns (DeletePaymentMethodResponse) {
    option (google.api.http) = {
      delete: "/v1/payment-methods/{payment_method_id}"
    };
  }

  // Set default payment method
  rpc SetDefaultPaymentMethod(SetDefaultPaymentMethodRequest) returns (SetDefaultPaymentMethodResponse) {
    option (google.api.http) = {
      post: "/v1/payment-methods/{payment_method_id}/set-default"
      body: "*"
    };
  }
}

// PaymentStatus represents payment status
enum PaymentStatus {
  PAYMENT_STATUS_UNSPECIFIED = 0;
  PAYMENT_STATUS_PENDING = 1;
  PAYMENT_STATUS_AUTHORIZED = 2;
  PAYMENT_STATUS_SUCCEEDED = 3;
  PAYMENT_STATUS_FAILED = 4;
  PAYMENT_STATUS_CANCELED = 5;
  PAYMENT_STATUS_REFUNDED = 6;
  PAYMENT_STATUS_PARTIALLY_REFUNDED = 7;
}

// PaymentMethodType represents payment method type
enum PaymentMethodType {
  PAYMENT_METHOD_TYPE_UNSPECIFIED = 0;
  PAYMENT_METHOD_TYPE_CARD = 1;
  PAYMENT_METHOD_TYPE_BANK_ACCOUNT = 2;
  PAYMENT_METHOD_TYPE_WALLET = 3;
  PAYMENT_METHOD_TYPE_CRYPTO = 4;
}

// Currency represents supported currencies
enum Currency {
  CURRENCY_UNSPECIFIED = 0;
  CURRENCY_USD = 1; // US Dollar
  CURRENCY_EUR = 2; // Euro
  CURRENCY_GBP = 3; // British Pound
  CURRENCY_JPY = 4; // Japanese Yen
  CURRENCY_CAD = 5; // Canadian Dollar
  CURRENCY_AUD = 6; // Australian Dollar
  CURRENCY_CHF = 7; // Swiss Franc
  CURRENCY_CNY = 8; // Chinese Yuan
}

// Money represents monetary value
message Money {
  // Amount in smallest currency unit (e.g., cents)
  int64 amount = 1;

  // Currency code
  Currency currency = 2;

  // Formatted amount (e.g., "$10.99")
  string formatted = 3;
}

// Payment represents a payment transaction
message Payment {
  // Payment ID
  string payment_id = 1;

  // User ID
  string user_id = 2;

  // Organization ID (optional)
  string organization_id = 3;

  // Amount
  Money amount = 4;

  // Status
  PaymentStatus status = 5;

  // Payment method ID
  string payment_method_id = 6;

  // Description
  string description = 7;

  // Invoice ID (if applicable)
  string invoice_id = 8;

  // Subscription ID (if applicable)
  string subscription_id = 9;

  // Provider transaction ID
  string provider_transaction_id = 10;

  // Provider (stripe, paypal, etc.)
  string provider = 11;

  // Metadata
  common.Metadata metadata = 12;

  // Refunded amount
  Money refunded_amount = 13;

  // Failure reason
  string failure_reason = 14;

  // Additional data
  map<string, string> data = 15;
}

// PaymentMethod represents a payment method
message PaymentMethod {
  // Payment method ID
  string payment_method_id = 1;

  // User ID
  string user_id = 2;

  // Type
  PaymentMethodType type = 3;

  // Display name
  string display_name = 4;

  // Whether default
  bool is_default = 5;

  // Card details (for card type)
  CardDetails card = 6;

  // Bank account details (for bank type)
  BankAccountDetails bank_account = 7;

  // Wallet details (for wallet type)
  WalletDetails wallet = 8;

  // Provider ID
  string provider_id = 9;

  // Metadata
  common.Metadata metadata = 10;
}

// CardDetails represents credit/debit card details
message CardDetails {
  // Last 4 digits
  string last4 = 1;

  // Brand (visa, mastercard, amex)
  string brand = 2;

  // Expiration month
  int32 exp_month = 3;

  // Expiration year
  int32 exp_year = 4;

  // Cardholder name
  string cardholder_name = 5;

  // Billing address
  common.Address billing_address = 6;
}

// BankAccountDetails represents bank account details
message BankAccountDetails {
  // Account holder name
  string account_holder_name = 1;

  // Bank name
  string bank_name = 2;

  // Account type (checking/savings)
  string account_type = 3;

  // Last 4 digits
  string last4 = 4;

  // Routing number (last 4)
  string routing_number_last4 = 5;
}

// WalletDetails represents digital wallet details
message WalletDetails {
  // Wallet type (paypal, apple_pay, google_pay)
  string wallet_type = 1;

  // Email or identifier
  string identifier = 2;
}

// CreatePaymentRequest creates payment
message CreatePaymentRequest {
  // Amount
  Money amount = 1;

  // Payment method ID
  string payment_method_id = 2;

  // Description
  string description = 3;

  // Whether to capture immediately (default true)
  bool capture = 4;

  // Invoice ID
  string invoice_id = 5;

  // Subscription ID
  string subscription_id = 6;

  // Additional data
  map<string, string> data = 7;
}

// CreatePaymentResponse returns payment
message CreatePaymentResponse {
  // Payment
  Payment payment = 1;

  // Client secret for client-side confirmation
  string client_secret = 2;
}

// GetPaymentRequest gets payment
message GetPaymentRequest {
  // Payment ID
  string payment_id = 1;
}

// GetPaymentResponse returns payment
message GetPaymentResponse {
  // Payment
  Payment payment = 1;
}

// ListPaymentsRequest lists payments
message ListPaymentsRequest {
  // Pagination
  common.PaginationRequest pagination = 1;

  // Filter by status
  optional PaymentStatus status = 2;

  // Filter by start date
  optional google.protobuf.Timestamp start_date = 3;

  // Filter by end date
  optional google.protobuf.Timestamp end_date = 4;
}

// ListPaymentsResponse returns payments
message ListPaymentsResponse {
  // Payments
  repeated Payment payments = 1;

  // Pagination
  common.PaginationResponse pagination = 2;
}

// CapturePaymentRequest captures authorized payment
message CapturePaymentRequest {
  // Payment ID
  string payment_id = 1;

  // Amount to capture (optional, defaults to full amount)
  optional Money amount = 2;
}

// CapturePaymentResponse returns captured payment
message CapturePaymentResponse {
  // Payment
  Payment payment = 1;
}

// CancelPaymentRequest cancels payment
message CancelPaymentRequest {
  // Payment ID
  string payment_id = 1;

  // Reason
  string reason = 2;
}

// CancelPaymentResponse confirms cancellation
message CancelPaymentResponse {
  // Payment
  Payment payment = 1;
}

// RefundPaymentRequest refunds payment
message RefundPaymentRequest {
  // Payment ID
  string payment_id = 1;

  // Amount to refund (optional, defaults to full amount)
  optional Money amount = 2;

  // Reason
  string reason = 3;
}

// RefundPaymentResponse returns refund
message RefundPaymentResponse {
  // Payment
  Payment payment = 1;

  // Refund ID
  string refund_id = 2;
}

// AddPaymentMethodRequest adds payment method
message AddPaymentMethodRequest {
  // Type
  PaymentMethodType type = 1;

  // Payment token from provider
  string payment_token = 2;

  // Set as default
  bool set_as_default = 3;

  // Card details (for card type)
  CardDetails card = 4;

  // Bank account details (for bank type)
  BankAccountDetails bank_account = 5;

  // Wallet details (for wallet type)
  WalletDetails wallet = 6;
}

// AddPaymentMethodResponse returns payment method
message AddPaymentMethodResponse {
  // Payment method
  PaymentMethod payment_method = 1;
}

// GetPaymentMethodRequest gets payment method
message GetPaymentMethodRequest {
  // Payment method ID
  string payment_method_id = 1;
}

// GetPaymentMethodResponse returns payment method
message GetPaymentMethodResponse {
  // Payment method
  PaymentMethod payment_method = 1;
}

// ListPaymentMethodsRequest lists payment methods
message ListPaymentMethodsRequest {
  // Filter by type
  optional PaymentMethodType type = 1;
}

// ListPaymentMethodsResponse returns payment methods
message ListPaymentMethodsResponse {
  // Payment methods
  repeated PaymentMethod payment_methods = 1;
}

// DeletePaymentMethodRequest deletes payment method
message DeletePaymentMethodRequest {
  // Payment method ID
  string payment_method_id = 1;
}

// DeletePaymentMethodResponse confirms deletion
message DeletePaymentMethodResponse {
  // Success
  bool success = 1;
}

// SetDefaultPaymentMethodRequest sets default payment method
message SetDefaultPaymentMethodRequest {
  // Payment method ID
  string payment_method_id = 1;
}

// SetDefaultPaymentMethodResponse confirms update
message SetDefaultPaymentMethodResponse {
  // Payment method
  PaymentMethod payment_method = 1;
}
