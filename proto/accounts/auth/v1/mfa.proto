syntax = "proto3";

package geniustechspace.accounts.auth.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/types.proto";

option go_package = "github.com/geniustechspace/api-contracts/gen/go/auth/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.auth.v1";

// -----------------------------------------------------------------------------
// Multi-Factor Authentication (MFA) Service API
//
// Enterprise-grade MFA API for IdP/MFA services. Implements enrollment,
// verification, recovery, and policy-driven workflows. Design aligns with:
//  - OIDC (map methods to `amr` values)
//  - NIST SP 800-63B (AAL1–AAL3 mapping via AssuranceLevel)
//  - FIDO2 / WebAuthn usage for high-assurance authentication
//
// This file is intended for gRPC-first development with HTTP JSON bindings
// (google.api.http) to support hybrid REST + gRPC consumers.
// -----------------------------------------------------------------------------


// -----------------------------------------------------------------------------
// SERVICE: MfaService
// -----------------------------------------------------------------------------
// gRPC service with HTTP JSON bindings for REST compatibility.
// Use JWT/OIDC authentication at the transport/gateway layer.
// -----------------------------------------------------------------------------
service MfaService {
  // Enable / start the MFA enrollment process for a user.
  rpc EnableMfa(EnableMfaRequest) returns (EnableMfaResponse) {
    option (google.api.http) = {
      post: "/v1/mfa/enable"
      body: "*"
    };
  }

  // Verify MFA setup (e.g., TOTP code or WebAuthn attestation).
  rpc VerifyMfaSetup(VerifyMfaSetupRequest) returns (VerifyMfaSetupResponse) {
    option (google.api.http) = {
      post: "/v1/mfa/verify-setup"
      body: "*"
    };
  }

  // Verify MFA during login and return tokens.
  rpc VerifyMfa(VerifyMfaRequest) returns (VerifyMfaResponse) {
    option (google.api.http) = {
      post: "/v1/mfa/verify"
      body: "*"
    };
  }

  // Disable an enrolled MFA factor.
  rpc DisableMfa(DisableMfaRequest) returns (DisableMfaResponse) {
    option (google.api.http) = {
      post: "/v1/mfa/disable"
      body: "*"
    };
  }

  // Regenerate backup codes.
  rpc RegenerateMfaBackupCodes(RegenerateMfaBackupCodesRequest) returns (RegenerateMfaBackupCodesResponse) {
    option (google.api.http) = {
      post: "/v1/mfa/regenerate-backup-codes"
      body: "*"
    };
  }

  // List enrolled MFA factors for a user.
  rpc ListMfaFactors(ListMfaFactorsRequest) returns (ListMfaFactorsResponse) {
    option (google.api.http) = {
      get: "/v1/mfa/factors"
    };
  }
}


// -----------------------------------------------------------------------------
// ENUM: MfaMethod
// -----------------------------------------------------------------------------
// Represents available MFA methods. Map these to OIDC `amr` values when
// issuing tokens (e.g., amr: ["webauthn", "otp"]).
// -----------------------------------------------------------------------------
enum MfaMethod {
  // Default/unknown state.
  MFA_METHOD_UNSPECIFIED = 0;

  // ---------------------------------------------------------------------------
  // STRONG / ENTERPRISE-RECOMMENDED METHODS
  // ---------------------------------------------------------------------------
  MFA_METHOD_WEBAUTHN = 1;           // FIDO2 / WebAuthn (phishing-resistant, AAL3)
  MFA_METHOD_HARDWARE_TOKEN = 2;     // Physical security key (U2F, OTP hardware)
  MFA_METHOD_PUSH_NOTIFICATION = 3;  // Push approval via enrolled device

  // ---------------------------------------------------------------------------
  // SOFTWARE-BASED METHODS
  // ---------------------------------------------------------------------------
  MFA_METHOD_TOTP = 4;               // Authenticator apps (TOTP)
  MFA_METHOD_BIOMETRIC = 5;          // On-device biometric (usually via platform/WebAuthn)

  // ---------------------------------------------------------------------------
  // RECOVERY / FALLBACK METHODS
  // ---------------------------------------------------------------------------
  MFA_METHOD_BACKUP_CODE = 6;        // One-time recovery codes

  // ---------------------------------------------------------------------------
  // LOW-ASSURANCE FALLBACKS (DISCOURAGED AS PRIMARY)
  // ---------------------------------------------------------------------------
  MFA_METHOD_SMS = 7;                // SMS-based OTP (fallback only)
  MFA_METHOD_EMAIL = 8;              // Email-based OTP/link (fallback only)
  MFA_METHOD_VOICE_CALL = 9;         // Voice call OTP (fallback)

  // ---------------------------------------------------------------------------
  // DEVICE / RISK / ENTERPRISE METHODS
  // ---------------------------------------------------------------------------
  MFA_METHOD_DEVICE_BINDING = 10;    // Registered device check / device presence
  MFA_METHOD_LOCATION_BASED = 11;    // Location/network step-up (risk signal)
  MFA_METHOD_SMART_CARD = 12;        // Smart card / PKI (PIV/CAC)
  MFA_METHOD_RISK_ADAPTIVE = 13;     // Risk/adaptive MFA (AI/rule-based step-up)
  MFA_METHOD_FEDERATED_ASSERTION = 14; // External IdP asserts MFA was performed
}

// -----------------------------------------------------------------------------
// ENUM: AssuranceLevel
// -----------------------------------------------------------------------------
// Maps to NIST SP 800-63B Assurance levels (AAL1–AAL3).
// -----------------------------------------------------------------------------
enum AssuranceLevel {
  ASSURANCE_LEVEL_UNSPECIFIED = 0;
  ASSURANCE_LEVEL_AAL1 = 1; // Single-factor or low-assurance
  ASSURANCE_LEVEL_AAL2 = 2; // Two-factor (software/hardware)
  ASSURANCE_LEVEL_AAL3 = 3; // High-assurance (cryptographic hardware-backed)
}

// -----------------------------------------------------------------------------
// MESSAGE: MfaSetup
// -----------------------------------------------------------------------------
// Returned data required to complete MFA enrollment. `secret` is provided
// only for TOTP-like flows (and should be transmitted only once).
// -----------------------------------------------------------------------------
message MfaSetup {
  MfaMethod method = 1;                         // Method being set up
  string secret = 2;                            // e.g., TOTP seed (display only once)
  string qr_code_url = 3;                       // QR code link for TOTP
  repeated string backup_codes = 4;             // One-time backup codes (display once)
  google.protobuf.Timestamp created_at = 5;     // Enrollment timestamp
  google.protobuf.Timestamp last_used_at = 6;   // Last successful use
  bool is_active = 7;                           // Whether enrolled factor is active
  map<string, string> metadata = 8;             // Provider/platform-specific metadata
}

// -----------------------------------------------------------------------------
// Request / Response messages
// -----------------------------------------------------------------------------

// EnableMfaRequest initiates MFA setup.
//
// Provide optional contact details for methods that require them (SMS/Email).
message EnableMfaRequest {
  string user_id = 1;            // Target user (server side can derive from auth token)
  MfaMethod method = 2;          // Desired MFA method to enable
  string email = 3;              // For email OTP or verification
  string phone_number = 4;       // For SMS/voice flows (E.164 preferred)
  RequestContext context = 99;   // Optional request tracing and risk info
}

// EnableMfaResponse returns setup details.
// `status` provides standardized operation result.
message EnableMfaResponse {
  MfaSetup setup = 1;
  OperationStatus status = 2;
}

// VerifyMfaSetupRequest verifies an enrollment step (TOTP code / WebAuthn attestation).
message VerifyMfaSetupRequest {
  string user_id = 1;
  MfaMethod method = 2;
  string code = 3;               // TOTP/passcode or attestation response ID (method-specific)
  string attestation_response = 4; // For WebAuthn, the attestation object (base64/encoded)
  RequestContext context = 99;
}

// VerifyMfaSetupResponse confirms enrollment and returns backup codes when appropriate.
message VerifyMfaSetupResponse {
  bool success = 1;
  OperationStatus status = 2;
  repeated string backup_codes = 3; // Show once; store hashed server side
}

// DisableMfaRequest disables a previously enrolled factor.
// Include verification (password or high-assurance confirm).
message DisableMfaRequest {
  string user_id = 1;
  string password = 2;          // Optional second factor for confirm (policy dependent)
  string code = 3;              // MFA code or backup code
  RequestContext context = 99;
}

// DisableMfaResponse confirms result
message DisableMfaResponse {
  OperationStatus status = 1;
}

// VerifyMfaRequest verifies MFA during an authentication flow and returns tokens.
message VerifyMfaRequest {
  string login_token = 1;       // Short-lived token produced by initial auth step
  string code = 2;              // MFA response (TOTP code, OTP, or attestation)
  MfaMethod method = 3;
  RequestContext context = 99;
}

// VerifyMfaResponse returns final authentication tokens (OIDC/JWT style).
message VerifyMfaResponse {
  string user_id = 1;
  string access_token = 2;
  string refresh_token = 3;
  google.protobuf.Timestamp expires_at = 4;
  OperationStatus status = 5;
}

// RegenerateMfaBackupCodesRequest regenerates backup codes for recovery.
// Requires re-authentication (password or other confirm method per policy).
message RegenerateMfaBackupCodesRequest {
  string user_id = 1;
  string password = 2;
  RequestContext context = 99;
}

// RegenerateMfaBackupCodesResponse returns newly generated backup codes.
message RegenerateMfaBackupCodesResponse {
  repeated string backup_codes = 1; // Show once; persist hashed server side
  OperationStatus status = 2;
}

// ListMfaFactorsRequest lists enrolled factors for a user (admin or user-scoped).
message ListMfaFactorsRequest {
  string user_id = 1;
  RequestContext context = 99;
}

// MfaFactor describes an enrolled factor for listing and management.
message MfaFactor {
  string id = 1;
  MfaMethod method = 2;
  AssuranceLevel assurance_level = 3;
  string display_name = 4;
  string device_id = 5;
  google.protobuf.Timestamp created_at = 6;
  google.protobuf.Timestamp last_used_at = 7;
  bool active = 8;
  map<string, string> metadata = 9;
}

message ListMfaFactorsResponse {
  Status status = 2;
  repeated MfaFactor factors = 1;
}
