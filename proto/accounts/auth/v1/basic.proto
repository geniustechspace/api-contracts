syntax = "proto3";

package geniustechspace.accounts.auth.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/types.proto";

option go_package = "github.com/geniustechspace/api-contracts/gen/go/auth/v1";
option java_multiple_files = true;
option java_package = "com.genitechspace.api.auth.v1";


// RegisterRequest contains user registration details
message RegisterRequest {
  // User's credentials
  string email = 1; // email address (must be unique)
  string username = 2;  // display name (must be unique)
  common.PhoneNumber phone_number = 3;  // Optional phone number (with country code)
  string password = 4; // password (min 8 characters)

  // User's personal details
  string given_name = 5;  // first name
  string family_name = 6;  // last name
  string middle_name = 7;  // middle name
  string date_of_birth = 8;  // date of birth (ISO 8601 format)

  // User's profile information (optional)
  string country_code = 10;  // ISO 3166-1 alpha-2 country code
  string language_code = 11;  // ISO 639-1 language code
  string timezone = 12;  // IANA time zone name
  string locale = 13;  // BCP 47 locale code


  // Optional metadata for registration tracking
  map<string, string> metadata = 13;
}

// RegisterResponse contains the newly created user and tokens
message RegisterResponse {
  // Unique user identifier
  string user_id = 1;

  // Timestamps (created_at, updated_at)
  google.protobuf.Timestamp created_at = 2;  // account creation time
  google.protobuf.Timestamp updated_at = 3;  // account update time

  // JWT tokens (access and refresh)
  common.Token access_token = 4;  // short-lived access token
  common.Token refresh_token = 5;  // long-lived refresh token

  // Metadata for tracking
  string device_id = 6;  // device identifier
  int64 version = 7;  // entity version for optimistic locking
  map<string, string> metadata = 8; // additional metadata
}

// LoginRequest contains user credentials
message LoginRequest {
  // User's credentials (one of email, phone_number, or username must be provided)
  string email = 1;  // email address
  common.PhoneNumber phone_number = 2;  // phone number
  string username = 3;  // username
  string password = 4;  // password

  // Security metadata for login context (optional)
  bool remember_me = 5;  // remember me option
  int32 refresh_rate = 6;  // token refresh rate in minutes
  bool verify_refresh = 7;  // verify refresh token validity (requires MFA)
  repeated string scopes = 8;  // requested scopes
  map<string, string> metadata = 9;  // additional metadata
}

// LoginResponse contains authentication tokens
message LoginResponse {
  // Unique user identifier
  string user_id = 1;

  // JWT tokens (access and refresh)
  common.Token access_token = 2;  // short-lived access token
  common.Token refresh_token = 3;  // long-lived refresh token

  // Metadata for tracking
  string device_id = 4;  // device identifier
  map<string, string> metadata = 5; // additional metadata
}

// LogoutRequest invalidates user tokens
message LogoutRequest {
  // JWT tokens to invalidate
  repeated string tokens = 1;

  // Device-specific logout option
  repeated string device_ids = 2;

  // Logout from all devices
  bool all_devices = 3;
}

