syntax = "proto3";

package geniustechspace.accounts.auth.v1;

import "google/api/annotations.proto";
import "accounts/auth/v1/basic.proto";
import "accounts/auth/v1/token.proto";
import "accounts/auth/v1/session.proto";

option go_package = "github.com/geniustechspace/api-contracts/gen/go/auth/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.auth.v1";

// AuthService handles user authentication and authorization
// Provides comprehensive authentication flows including registration, login,
// token management, MFA, and session handling
service AuthService {
  // Register a new user account
  rpc Register(RegisterRequest) returns (RegisterResponse) {
    option (google.api.http) = {
      post: "/v1/auth/register"
      body: "*"
    };
  }

  // Login with email and password
  rpc Login(LoginRequest) returns (LoginResponse) {
    option (google.api.http) = {
      post: "/v1/auth/login"
      body: "*"
    };
  }

  // Refresh an access token using a refresh token
  rpc RefreshToken(RefreshTokenRequest) returns (RefreshTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/refresh"
      body: "*"
    };
  }

  // Logout and invalidate tokens
  rpc Logout(LogoutRequest) returns (LogoutResponse) {
    option (google.api.http) = {
      post: "/v1/auth/logout"
      body: "*"
    };
  }

  // Verify a token's validity
  rpc VerifyToken(VerifyTokenRequest) returns (VerifyTokenResponse) {
    option (google.api.http) = {
      post: "/v1/auth/verify"
      body: "*"
    };
  }

  // Get all active sessions for the authenticated user
  rpc GetSessions(GetSessionsRequest) returns (GetSessionsResponse) {
    option (google.api.http) = {
      get: "/v1/auth/sessions"
    };
  }

  // Revoke a specific session
  rpc RevokeSession(RevokeSessionRequest) returns (RevokeSessionResponse) {
    option (google.api.http) = {
      delete: "/v1/auth/sessions/{session_id}"
    };
  }

  // Change user password
  rpc ChangePassword(ChangePasswordRequest) returns (ChangePasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/change-password"
      body: "*"
    };
  }

  // Request password reset
  rpc RequestPasswordReset(RequestPasswordResetRequest) returns (RequestPasswordResetResponse) {
    option (google.api.http) = {
      post: "/v1/auth/request-password-reset"
      body: "*"
    };
  }

  // Reset password with token
  rpc ResetPassword(ResetPasswordRequest) returns (ResetPasswordResponse) {
    option (google.api.http) = {
      post: "/v1/auth/reset-password"
      body: "*"
    };
  }
}
