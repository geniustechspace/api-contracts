syntax = "proto3";

package geniustechspace.accounts.user.v1;

import "google/api/annotations.proto";
import "google/protobuf/timestamp.proto";
import "common/types.proto";

option go_package = "github.com/geniustechspace/api-contracts/gen/go/user/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.user.v1";

// UserService handles user profile and account management
service UserService {
  // Get user profile by ID
  rpc GetUser(GetUserRequest) returns (GetUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/{user_id}"
    };
  }

  // Get current authenticated user profile
  rpc GetCurrentUser(GetCurrentUserRequest) returns (GetCurrentUserResponse) {
    option (google.api.http) = {
      get: "/v1/users/me"
    };
  }

  // Update user profile
  rpc UpdateUser(UpdateUserRequest) returns (UpdateUserResponse) {
    option (google.api.http) = {
      patch: "/v1/users/{user_id}"
      body: "*"
    };
  }

  // Delete user account
  rpc DeleteUser(DeleteUserRequest) returns (DeleteUserResponse) {
    option (google.api.http) = {
      delete: "/v1/users/{user_id}"
    };
  }

  // List users with pagination and filtering
  rpc ListUsers(ListUsersRequest) returns (ListUsersResponse) {
    option (google.api.http) = {
      get: "/v1/users"
    };
  }

  // Search users
  rpc SearchUsers(SearchUsersRequest) returns (SearchUsersResponse) {
    option (google.api.http) = {
      post: "/v1/users/search"
      body: "*"
    };
  }

  // Update user avatar
  rpc UpdateAvatar(UpdateAvatarRequest) returns (UpdateAvatarResponse) {
    option (google.api.http) = {
      post: "/v1/users/{user_id}/avatar"
      body: "*"
    };
  }

  // Verify user email
  rpc VerifyEmail(VerifyEmailRequest) returns (VerifyEmailResponse) {
    option (google.api.http) = {
      post: "/v1/users/verify-email"
      body: "*"
    };
  }

  // Request email verification
  rpc RequestEmailVerification(RequestEmailVerificationRequest) returns (RequestEmailVerificationResponse) {
    option (google.api.http) = {
      post: "/v1/users/request-email-verification"
      body: "*"
    };
  }
}

// UserStatus represents user account status
enum UserStatus {
  USER_STATUS_UNSPECIFIED = 0;
  USER_STATUS_ACTIVE = 1;
  USER_STATUS_INACTIVE = 2;
  USER_STATUS_SUSPENDED = 3;
  USER_STATUS_PENDING_VERIFICATION = 4;
  USER_STATUS_DELETED = 5;
}

// User represents a user profile
message User {
  // Unique user identifier
  string user_id = 1;

  // Email address
  string email = 2;

  // Full name
  string full_name = 3;

  // Display name/username
  string display_name = 4;

  // Phone number
  common.PhoneNumber phone = 5;

  // Avatar URL
  string avatar_url = 6;

  // Bio/description
  string bio = 7;

  // Physical address
  common.Address address = 8;

  // User status
  UserStatus status = 9;

  // Whether email is verified
  bool email_verified = 10;

  // Whether phone is verified
  bool phone_verified = 11;

  // User roles
  repeated string roles = 12;

  // User permissions
  repeated string permissions = 13;

  // Metadata
  common.Metadata metadata = 14;

  // Last login timestamp
  google.protobuf.Timestamp last_login_at = 15;

  // Account preferences
  map<string, string> preferences = 16;

  // Custom fields
  map<string, string> custom_fields = 17;
}

// GetUserRequest requests a user by ID
message GetUserRequest {
  // User ID
  string user_id = 1;
}

// GetUserResponse returns user profile
message GetUserResponse {
  // User profile
  User user = 1;
}

// GetCurrentUserRequest requests current authenticated user
message GetCurrentUserRequest {
  // No fields needed - derived from authentication
}

// GetCurrentUserResponse returns current user profile
message GetCurrentUserResponse {
  // User profile
  User user = 1;
}

// UpdateUserRequest updates user profile
message UpdateUserRequest {
  // User ID
  string user_id = 1;

  // Full name
  optional string full_name = 2;

  // Display name
  optional string display_name = 3;

  // Phone number
  optional common.PhoneNumber phone = 4;

  // Bio
  optional string bio = 5;

  // Address
  optional common.Address address = 6;

  // Preferences
  map<string, string> preferences = 7;

  // Custom fields
  map<string, string> custom_fields = 8;
}

// UpdateUserResponse returns updated user
message UpdateUserResponse {
  // Updated user profile
  User user = 1;
}

// DeleteUserRequest deletes user account
message DeleteUserRequest {
  // User ID
  string user_id = 1;

  // Reason for deletion
  string reason = 2;
}

// DeleteUserResponse confirms deletion
message DeleteUserResponse {
  // Success status
  bool success = 1;

  // Human-readable message
  string message = 2;
}

// ListUsersRequest lists users with pagination
message ListUsersRequest {
  // Pagination parameters
  common.PaginationRequest pagination = 1;

  // Filter by status
  optional UserStatus status = 2;

  // Filter by role
  optional string role = 3;

  // Sort field
  string sort_by = 4;

  // Sort order (asc/desc)
  string sort_order = 5;
}

// ListUsersResponse returns list of users
message ListUsersResponse {
  // List of users
  repeated User users = 1;

  // Pagination metadata
  common.PaginationResponse pagination = 2;
}

// SearchUsersRequest searches users
message SearchUsersRequest {
  // Search query
  string query = 1;

  // Pagination parameters
  common.PaginationRequest pagination = 2;

  // Search fields
  repeated string fields = 3;
}

// SearchUsersResponse returns search results
message SearchUsersResponse {
  // List of users matching search
  repeated User users = 1;

  // Pagination metadata
  common.PaginationResponse pagination = 2;
}

// UpdateAvatarRequest updates user avatar
message UpdateAvatarRequest {
  // User ID
  string user_id = 1;

  // Avatar image data (base64 encoded or URL)
  string avatar_data = 2;

  // Content type (image/jpeg, image/png)
  string content_type = 3;
}

// UpdateAvatarResponse returns new avatar URL
message UpdateAvatarResponse {
  // New avatar URL
  string avatar_url = 1;

  // Success status
  bool success = 2;
}

// VerifyEmailRequest verifies email with token
message VerifyEmailRequest {
  // Verification token from email
  string token = 1;
}

// VerifyEmailResponse confirms email verification
message VerifyEmailResponse {
  // Success status
  bool success = 1;

  // Human-readable message
  string message = 2;
}

// RequestEmailVerificationRequest requests verification email
message RequestEmailVerificationRequest {
  // Email to verify (optional, defaults to user's email)
  optional string email = 1;
}

// RequestEmailVerificationResponse confirms email sent
message RequestEmailVerificationResponse {
  // Success status
  bool success = 1;

  // Human-readable message
  string message = 2;
}
