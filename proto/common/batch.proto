syntax = "proto3";

package geniustechspace.common.v1;

// =============================================================================
// BATCH MODULE - v1.0.0
// =============================================================================
//
// Batch operation types for processing multiple items in a single request.
// Supports atomic and non-atomic batch processing with detailed results.
//
// USAGE:
// - Bulk create/update/delete operations
// - Import/export operations
// - Mass updates
// - Parallel processing
//
// PATTERNS:
// - Atomic: All operations succeed or all fail (transaction)
// - Non-atomic: Each operation independent (best effort)
//
// =============================================================================

import "common/base.proto";
import "common/enums.proto";

// Language-specific code generation options
option go_package = "github.com/geniustechspace/api-contracts/gen/go/common/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.common.v1";
option csharp_namespace = "GeniusTechSpace.Api.Common.V1";
option php_namespace = "GeniusTechSpace\\Api\\Common\\V1";
option ruby_package = "GeniusTechSpace::Api::Common::V1";

// =============================================================================
// BATCH REQUEST
// =============================================================================

// BatchRequest groups multiple operations into a single request.
//
// USAGE:
// - Submit multiple operations at once
// - Reduce network overhead
// - Improve throughput
//
// CONSIDERATIONS:
// - Set reasonable limits (e.g., max 100-1000 operations)
// - Consider timeout implications
// - Implement idempotency for retries
message BatchRequest {
  // Individual operations to execute.
  // USAGE: List of operations to process
  // LIMIT: Enforce server-side maximum (e.g., 1000 operations)
  repeated BatchOperation operations = 1;

  // Whether to execute operations atomically (all or nothing).
  // USAGE: Transaction semantics
  // TRUE: All operations succeed or all rollback (database transaction)
  // FALSE: Each operation independent (best effort)
  // DEFAULT: false
  // PERFORMANCE: Atomic operations may be slower
  bool atomic = 2;

  // Whether to stop on first error (non-atomic mode only).
  // USAGE: Fail-fast behavior
  // TRUE: Stop processing on first failure
  // FALSE: Continue processing all operations
  // DEFAULT: false
  // NOTE: Ignored if atomic=true
  bool stop_on_error = 3;

  // Whether to execute operations in parallel (non-atomic mode only).
  // USAGE: Performance optimization
  // TRUE: Process operations concurrently
  // FALSE: Process operations sequentially
  // DEFAULT: false
  // NOTE: May affect ordering guarantees
  bool parallel = 4;

  // Optional idempotency key for request-level deduplication.
  // USAGE: Prevent duplicate batch execution on retry
  // FORMAT: UUID or client-generated unique string
  // BEHAVIOR: Same key = return cached result without re-execution
  string idempotency_key = 5;
}

// =============================================================================
// BATCH OPERATION
// =============================================================================

// BatchOperation represents a single operation within a batch.
//
// USAGE:
// - Define individual operations
// - Track operation results
// - Support different operation types
message BatchOperation {
  // Unique identifier for this operation within the batch.
  // USAGE: Correlate request operation with response result
  // EXAMPLE: "op1", "op2", "op3" or UUIDs
  // REQUIREMENT: Must be unique within the batch
  string operation_id = 1;

  // Operation type to perform.
  // USAGE: Specify the action
  // VALUES: "create", "update", "delete", "upsert", "patch"
  // VALIDATION: Must be supported by the service
  string operation_type = 2;

  // Entity type being operated on.
  // USAGE: Identify target resource type
  // EXAMPLE: "user", "product", "order"
  string entity_type = 3;

  // Entity identifier (for update, delete operations).
  // USAGE: Specify which entity to modify
  // REQUIRED: For update, delete, upsert operations
  // NULL: For create operations
  string entity_id = 4;

  // Operation payload data.
  // USAGE: Data for create, update, patch operations
  // FORMAT: JSON or entity-specific data
  // REQUIRED: For create, update, upsert, patch operations
  // NULL: For delete operations
  map<string, string> data = 5;

  // Optional idempotency key for operation-level deduplication.
  // USAGE: Prevent duplicate operations within batch
  // FORMAT: UUID or client-generated unique string
  string idempotency_key = 6;

  // Optional conditional execution criteria.
  // USAGE: Execute only if conditions met
  // EXAMPLE: {"version": "5", "status": "draft"}
  // BEHAVIOR: Skip operation if conditions not met
  map<string, string> conditions = 7;
}

// =============================================================================
// BATCH RESPONSE
// =============================================================================

// BatchResponse provides results for all operations in a batch.
//
// USAGE:
// - Return results for each operation
// - Provide overall batch status
// - Enable partial success handling
message BatchResponse {
  // Overall batch execution status.
  // USAGE: High-level batch outcome
  // SUCCESS: All operations succeeded
  // PARTIAL: Some operations failed (non-atomic mode)
  // FAILURE: All operations failed or rolled back
  Status status = 1;

  // Human-readable summary message.
  // USAGE: Describe batch execution outcome
  // EXAMPLE: "10 of 15 operations succeeded"
  string message = 2;

  // Results for each operation.
  // USAGE: Detailed per-operation outcomes
  // INDEXED BY: operation_id from BatchOperation
  repeated BatchOperationResult results = 3;

  // Total number of operations in the batch.
  int32 total_operations = 4;

  // Number of successful operations.
  int32 successful_operations = 5;

  // Number of failed operations.
  int32 failed_operations = 6;

  // Number of skipped operations (due to conditions or errors).
  int32 skipped_operations = 7;

  // Total execution time in milliseconds.
  // USAGE: Performance monitoring
  int32 execution_time_ms = 10;
}

// =============================================================================
// BATCH OPERATION RESULT
// =============================================================================

// BatchOperationResult provides the outcome of a single batch operation.
//
// USAGE:
// - Track individual operation results
// - Provide detailed error information
// - Return created/updated entity data
message BatchOperationResult {
  // Operation identifier from BatchOperation.
  // USAGE: Correlate with original operation
  string operation_id = 1;

  // Operation execution status.
  // SUCCESS: Operation completed successfully
  // FAILURE: Operation failed
  // SKIPPED: Operation not executed (condition failed or stop_on_error)
  Status status = 2;

  // Result message or error description.
  string message = 3;

  // Detailed error information (if failed).
  ErrorDetail error = 4;

  // Result data for successful operations.
  // USAGE: Return created/updated entity
  // EXAMPLE: {"id": "123", "version": "2"}
  map<string, string> data = 5;

  // Operation execution time in milliseconds.
  int32 execution_time_ms = 10;
}
