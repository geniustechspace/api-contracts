syntax = "proto3";

package geniustechspace.common.v1;

// =============================================================================
// TIME MODULE - v1.0.0
// =============================================================================
//
// Time ranges and recurring event patterns for scheduling.
// Supports flexible scheduling scenarios with iCalendar compatibility.
//
// USAGE:
// - Event scheduling
// - Availability windows
// - Recurring appointments
// - Business hours
//
// COMPLIANCE:
// - RFC 5545: iCalendar recurrence rules
//
// =============================================================================

import "google/protobuf/timestamp.proto";

// Language-specific code generation options
option go_package = "github.com/geniustechspace/api-contracts/gen/go/common/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.common.v1";

// =============================================================================
// TIME RANGE
// =============================================================================

// TimeRange represents a period between two points in time.
//
// USAGE:
// - Event start/end times
// - Availability windows
// - Booking time slots
// - Report date ranges
//
// VALIDATION:
// - start_time must be before end_time
// - Both timestamps required
message TimeRange {
  // Start of the time range (inclusive).
  // USAGE: Beginning of period
  // FORMAT: UTC timezone recommended
  // VALIDATION: Required, must be before end_time
  google.protobuf.Timestamp start_time = 1;

  // End of the time range (exclusive).
  // USAGE: End of period
  // FORMAT: UTC timezone recommended
  // VALIDATION: Required, must be after start_time
  google.protobuf.Timestamp end_time = 2;

  // Optional timezone identifier for the range.
  // USAGE: Display in user's local timezone
  // FORMAT: IANA timezone database name
  // EXAMPLE: "America/New_York", "Europe/London", "Asia/Tokyo"
  // REFERENCE: https://www.iana.org/time-zones
  string timezone = 3;

  // Whether this time range is all-day (ignores specific times).
  // USAGE: Calendar events, holidays, date-only periods
  // BEHAVIOR: When true, only date portion matters
  bool is_all_day = 4;
}

// =============================================================================
// RECURRENCE RULE
// =============================================================================

// RecurrenceRule defines patterns for recurring events (iCalendar RRULE format).
//
// USAGE:
// - Recurring meetings and appointments
// - Scheduled tasks and jobs
// - Subscription renewals
// - Periodic reports
//
// COMPLIANCE:
// - RFC 5545: iCalendar recurrence rule specification
//
// EXAMPLES:
// - Daily: frequency="DAILY", interval=1
// - Weekly on Mon/Wed/Fri: frequency="WEEKLY", interval=1, by_day=["MO","WE","FR"]
// - Monthly on 15th: frequency="MONTHLY", interval=1, by_month_day=[15]
// - Yearly on Jan 1st: frequency="YEARLY", interval=1, by_month=[1], by_month_day=[1]
message RecurrenceRule {
  // Recurrence frequency.
  // USAGE: Base unit for recurrence
  // VALUES: "DAILY", "WEEKLY", "MONTHLY", "YEARLY"
  // EXAMPLE: "WEEKLY" with interval=2 = every 2 weeks
  // STANDARD: RFC 5545 FREQ component
  string frequency = 1;

  // Interval between recurrences.
  // USAGE: Multiply frequency by this value
  // EXAMPLE: frequency="DAILY", interval=3 = every 3 days
  // DEFAULT: 1
  // RANGE: >= 1
  int32 interval = 2;

  // Optional end date for the recurrence.
  // USAGE: Limit recurrence to specific date
  // FORMAT: UTC timezone
  // ALTERNATIVE: Use count instead
  google.protobuf.Timestamp until = 3;

  // Optional maximum number of occurrences.
  // USAGE: Limit total number of recurrences
  // EXAMPLE: count=10 = exactly 10 occurrences
  // ALTERNATIVE: Use until instead
  // VALIDATION: >= 1 if specified
  int32 count = 4;

  // Days of the week for recurrence.
  // USAGE: Specify which weekdays to recur on
  // FORMAT: Two-letter codes: MO, TU, WE, TH, FR, SA, SU
  // EXAMPLE: ["MO", "WE", "FR"] = Monday, Wednesday, Friday
  // APPLIES TO: WEEKLY, MONTHLY, YEARLY frequencies
  repeated string by_day = 5;

  // Days of the month for recurrence.
  // USAGE: Specify which days of month to recur on
  // RANGE: 1-31 or -1 to -31 (negative = from end of month)
  // EXAMPLE: [1, 15] = 1st and 15th of each month
  // EXAMPLE: [-1] = last day of month
  // APPLIES TO: MONTHLY, YEARLY frequencies
  repeated int32 by_month_day = 6;

  // Months of the year for recurrence.
  // USAGE: Specify which months to recur in
  // RANGE: 1-12 (1=January, 12=December)
  // EXAMPLE: [1, 7] = January and July
  // APPLIES TO: YEARLY frequency
  repeated int32 by_month = 7;

  // Week numbers for recurrence.
  // USAGE: Specify which weeks of year to recur in
  // RANGE: 1-53 or -1 to -53 (negative = from end of year)
  // EXAMPLE: [1, 52] = first and last weeks of year
  // APPLIES TO: YEARLY frequency
  repeated int32 by_week_no = 8;

  // Starting day of the week (for week calculations).
  // USAGE: Define what day starts the week
  // FORMAT: MO, TU, WE, TH, FR, SA, SU
  // DEFAULT: "MO" (Monday)
  // STANDARD: RFC 5545 WKST component
  string week_start = 9;

  // Optional timezone for recurrence calculations.
  // USAGE: Calculate occurrences in specific timezone
  // FORMAT: IANA timezone database name
  // EXAMPLE: "America/New_York", "Europe/London"
  string timezone = 10;
}
