syntax = "proto3";

package geniustechspace.common.v1;

// =============================================================================
// MONEY MODULE - v1.0.0
// =============================================================================
//
// Financial and monetary types with multi-currency support.
// Ensures precise decimal handling for financial calculations.
//
// USAGE:
// - Pricing and billing
// - E-commerce transactions
// - Financial reporting
//
// COMPLIANCE:
// - PCI DSS: Secure financial data handling
// - ISO 4217: Currency codes
// - GAAP/IFRS: Financial reporting standards
//
// =============================================================================

// Language-specific code generation options
option go_package = "github.com/geniustechspace/api-contracts/gen/go/common/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.common.v1";
option csharp_namespace = "GeniusTechSpace.Api.Common.V1";
option php_namespace = "GeniusTechSpace\\Api\\Common\\V1";
option ruby_package = "GeniusTechSpace::Api::Common::V1";

// =============================================================================
// MONEY
// =============================================================================

// Money represents a monetary amount with currency.
//
// USAGE:
// - Prices, fees, balances, transactions
// - Always store amounts as integers (smallest currency unit)
// - Never use floating point for financial calculations
//
// PRECISION:
// - Store amounts in smallest currency unit (cents, pence, etc.)
// - Example: $10.99 = 1099 cents, €20.50 = 2050 cents
// - Avoids floating-point rounding errors
//
// VALIDATION:
// - Currency code must be ISO 4217 (3-letter code)
// - Amount must be >= 0 for most use cases
//
// COMPLIANCE:
// - PCI DSS: Secure handling of financial data
// - GAAP/IFRS: Accurate financial reporting
message Money {
  // Monetary amount in smallest currency unit (e.g., cents).
  // USAGE: Store all amounts as integers to avoid rounding errors
  // EXAMPLE:
  //   - $10.99 USD = 1099 (cents)
  //   - €20.50 EUR = 2050 (cents)
  //   - ¥1000 JPY = 1000 (yen, no subunit)
  // CALCULATION: Display amount = amount / 10^decimal_places
  // VALIDATION: Use int64 to support large values
  int64 amount = 1;

  // Currency code (ISO 4217 format).
  // USAGE: Three-letter uppercase currency code
  // EXAMPLE: "USD", "EUR", "GBP", "JPY", "CAD"
  // VALIDATION: Must be valid ISO 4217 currency code
  // REFERENCE: https://www.iso.org/iso-4217-currency-codes.html
  string currency_code = 2;

  // Number of decimal places for this currency.
  // USAGE: Format display amount correctly
  // EXAMPLE:
  //   - USD, EUR, GBP = 2 (cents/pence)
  //   - JPY, KRW = 0 (no subunit)
  //   - BHD, KWD, OMR = 3 (fils)
  // DEFAULT: 2 for most currencies
  int32 decimal_places = 3;

  // Human-readable formatted amount.
  // USAGE: Display to end users
  // EXAMPLE: "$10.99", "€20.50", "¥1,000"
  // GENERATION: Format based on locale and currency
  // NOTE: Read-only, computed from amount and currency_code
  string display_amount = 4;

  // Optional currency symbol for display.
  // USAGE: UI rendering
  // EXAMPLE: "$", "€", "£", "¥"
  // NOTE: Position varies by locale (e.g., "$10" vs "10 €")
  string currency_symbol = 5;
}
