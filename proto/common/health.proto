syntax = "proto3";

package geniustechspace.common.v1;

// =============================================================================
// HEALTH MODULE - v1.0.0
// =============================================================================
//
// Service health check and status monitoring types.
// Enables readiness, liveness, and dependency health checks.
//
// USAGE:
// - Health check endpoints
// - Service monitoring
// - Load balancer health probes
// - Dependency tracking
//
// COMPLIANCE:
// - SOC 2: System monitoring and availability
//
// =============================================================================

import "google/protobuf/timestamp.proto";
import "common/enums.proto";

// Language-specific code generation options
option go_package = "github.com/geniustechspace/api-contracts/gen/go/common/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.common.v1";
option csharp_namespace = "GeniusTechSpace.Api.Common.V1";
option php_namespace = "GeniusTechSpace\\Api\\Common\\V1";
option ruby_package = "GeniusTechSpace::Api::Common::V1";

// =============================================================================
// HEALTH CHECK
// =============================================================================

// HealthCheckResponse provides comprehensive service health information.
//
// USAGE:
// - /health or /healthz endpoints
// - Kubernetes liveness/readiness probes
// - Load balancer health checks
// - Service monitoring dashboards
//
// PATTERNS:
// - Liveness: Is the service running? (restart if not)
// - Readiness: Can the service accept traffic? (remove from load balancer if not)
// - Startup: Has the service finished initialization?
//
// COMPLIANCE:
// - SOC 2: System availability monitoring
message HealthCheckResponse {
  // Overall service health status.
  // USAGE: High-level health indicator
  // VALUES:
  //   - SUCCESS: Service is healthy and operational
  //   - DEGRADED: Service is operational but experiencing issues
  //   - FAILURE: Service is unhealthy and cannot serve traffic
  Status status = 1;

  // Human-readable description of health status.
  // USAGE: Provide context about current state
  // EXAMPLE: "All systems operational", "Database connection slow"
  string message = 2;

  // Timestamp when health check was performed.
  // USAGE: Detect stale health checks, calculate response time
  // FORMAT: UTC timezone
  google.protobuf.Timestamp timestamp = 3;

  // Service version or build identifier.
  // USAGE: Track which version is running, deployment verification
  // FORMAT: Semantic versioning or git commit SHA
  // EXAMPLE: "v1.2.3", "2024.01.15", "abc1234"
  string version = 4;

  // Service uptime in seconds.
  // USAGE: Monitor service stability, restart frequency
  // CALCULATION: Current time - service start time
  int64 uptime_seconds = 5;

  // Health status of individual dependencies.
  // USAGE: Identify failing components, targeted troubleshooting
  // EXAMPLE:
  //   - "database": {status: SUCCESS, response_time_ms: 5}
  //   - "cache": {status: FAILURE, message: "Connection timeout"}
  //   - "external_api": {status: DEGRADED, response_time_ms: 500}
  map<string, DependencyHealth> dependencies = 6;

  // Optional system metrics.
  // USAGE: Resource utilization, performance monitoring
  // EXAMPLE:
  //   - "cpu_usage_percent": "45"
  //   - "memory_usage_mb": "512"
  //   - "active_connections": "25"
  map<string, string> metrics = 7;
}

// DependencyHealth represents the health of a single dependency.
message DependencyHealth {
  // Dependency health status.
  Status status = 1;

  // Optional error message if unhealthy.
  string message = 2;

  // Response time in milliseconds.
  // USAGE: Detect slow dependencies causing degradation
  int32 response_time_ms = 3;

  // Timestamp of last successful check.
  google.protobuf.Timestamp last_success = 4;
}
