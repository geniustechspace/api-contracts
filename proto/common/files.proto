syntax = "proto3";

package geniustechspace.common.v1;

// =============================================================================
// FILES MODULE - v1.0.0
// =============================================================================
//
// File and media metadata for upload, storage, and retrieval.
// Supports various file types with security and compliance features.
//
// USAGE:
// - Document management
// - Media uploads
// - File sharing
// - Attachment handling
//
// COMPLIANCE:
// - GDPR: Personal data in files
// - PCI DSS: Secure file handling
// - HIPAA: Protected health information
//
// =============================================================================

import "google/protobuf/timestamp.proto";
import "common/enums.proto";

// Language-specific code generation options
option go_package = "github.com/geniustechspace/api-contracts/gen/go/common/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.common.v1";
option csharp_namespace = "GeniusTechSpace.Api.Common.V1";
option php_namespace = "GeniusTechSpace\\Api\\Common\\V1";
option ruby_package = "GeniusTechSpace::Api::Common::V1";

// =============================================================================
// FILE METADATA
// =============================================================================

// FileMetadata contains information about uploaded or stored files.
//
// USAGE:
// - File upload responses
// - Document management systems
// - Media libraries
// - Attachment references
//
// SECURITY:
// - Validate file types and sizes
// - Scan for malware before storage
// - Encrypt sensitive files at rest
//
// COMPLIANCE:
// - GDPR: Personal data in files requires consent
// - PCI DSS: Secure file storage and transmission
// - HIPAA: Protected health information in files
message FileMetadata {
  // Unique file identifier.
  // USAGE: Reference file in database, storage system
  // FORMAT: UUID v4 recommended
  // IMMUTABLE: Should not change after creation
  string file_id = 1;

  // Original filename as uploaded by user.
  // USAGE: Display to users, download as original name
  // EXAMPLE: "report-2024.pdf", "profile-photo.jpg"
  // SECURITY: Sanitize to prevent directory traversal attacks
  string filename = 2;

  // MIME type of the file.
  // USAGE: Content-Type header, browser rendering
  // EXAMPLE: "image/jpeg", "application/pdf", "text/csv"
  // VALIDATION: Verify matches actual file content
  // REFERENCE: https://www.iana.org/assignments/media-types
  string mime_type = 3;

  // File size in bytes.
  // USAGE: Quota management, progress indicators
  // VALIDATION: Enforce maximum file size limits
  // EXAMPLE: 5242880 = 5 MB
  int64 size_bytes = 4;

  // Cryptographic hash of file content (for integrity verification).
  // USAGE: Detect corruption, prevent duplicates, security audit
  // ALGORITHM: SHA-256 recommended
  // FORMAT: Hexadecimal string
  // EXAMPLE: "e3b0c44298fc1c149afbf4c8996fb92427ae41e4649b934ca495991b7852b855"
  string checksum = 5;

  // Storage location or URL for file access.
  // USAGE: Download URL, storage bucket path
  // FORMAT: URL or storage path
  // EXAMPLE: "https://cdn.example.com/files/abc123.pdf"
  // SECURITY: Use signed URLs with expiration for sensitive files
  string storage_url = 6;

  // When the file was uploaded.
  // USAGE: Sort by upload date, audit trails
  // FORMAT: UTC timezone
  google.protobuf.Timestamp uploaded_at = 7;

  // User or service that uploaded the file.
  // USAGE: Ownership, permissions, audit trails
  // FORMAT: UUID or email
  // COMPLIANCE: Required for audit trails
  string uploaded_by = 8;

  // Optional expiration timestamp for temporary files.
  // USAGE: Auto-delete after expiration, temporary shares
  // FORMAT: UTC timezone
  // EXAMPLE: Temporary upload links, time-limited shares
  google.protobuf.Timestamp expires_at = 9;

  // Whether the file has been scanned for malware/viruses.
  // USAGE: Security validation before serving
  // RECOMMENDATION: Scan all user-uploaded files
  bool is_scanned = 10;

  // Whether the file is safe (no malware detected).
  // USAGE: Block access to unsafe files
  // DEFAULT: false until scan completes
  bool is_safe = 11;

  // Data classification level for access control.
  // USAGE: Encryption requirements, access policies
  // COMPLIANCE: ISO 27001, PCI DSS - Required for sensitive data
  DataClassification classification = 12;


  // Additional file-specific metadata.
  // USAGE: EXIF data, video codecs, document properties
  // EXAMPLE: {"author": "John Doe", "pages": "10"}
  map<string, string> metadata = 20;
}
