syntax = "proto3";

package geniustechspace.common.v1;

// =============================================================================
// SEARCH MODULE - v1.0.0
// =============================================================================
//
// Search and filtering types for query operations.
// Supports full-text search, filters, and faceted search.
//
// USAGE:
// - Search endpoints
// - Filtering and sorting
// - Faceted navigation
// - Advanced queries
//
// =============================================================================

import "common/pagination.proto";
import "common/enums.proto";

// Language-specific code generation options
option go_package = "github.com/geniustechspace/api-contracts/gen/go/common/v1";
option java_multiple_files = true;
option java_package = "com.geniustechspace.api.common.v1";
option csharp_namespace = "GeniusTechSpace.Api.Common.V1";
option php_namespace = "GeniusTechSpace\\Api\\Common\\V1";
option ruby_package = "GeniusTechSpace::Api::Common::V1";

// =============================================================================
// SEARCH REQUEST
// =============================================================================

// SearchRequest provides parameters for search and filtering operations.
//
// USAGE:
// - Full-text search across entities
// - Filter by multiple criteria
// - Sort and paginate results
// - Faceted search for refinement
message SearchRequest {
  // Full-text search query string.
  // USAGE: Keywords to search for
  // EXAMPLE: "user email:john@example.com status:active"
  // SYNTAX: Can support advanced query syntax (AND, OR, NOT, field:value)
  string query = 1;

  // Structured filters for precise matching.
  // USAGE: Key-value filters applied with AND logic
  // EXAMPLE:
  //   - "status": "active"
  //   - "created_date": "2024-01-01"
  //   - "tags": "premium"
  // OPERATORS: Can support operators like gte, lte, contains
  map<string, string> filters = 2;

  // Fields to include in the response.
  // USAGE: Optimize response size, fetch only needed fields
  // EXAMPLE: ["id", "name", "email"]
  // DEFAULT: All fields if empty
  repeated string fields = 3;

  // Fields to search within (for full-text search).
  // USAGE: Limit search scope to specific fields
  // EXAMPLE: ["title", "description", "tags"]
  // DEFAULT: All searchable fields if empty
  repeated string search_fields = 4;

  // Pagination parameters.
  // USAGE: Control page size and navigation
  PaginationRequest pagination = 5;

  // Facets to compute for result refinement.
  // USAGE: Request aggregations for filtering UI
  // EXAMPLE: ["category", "brand", "price_range"]
  // RESPONSE: Returns facet counts in SearchResponse
  repeated string facets = 6;

  // Whether to highlight matched terms in results.
  // USAGE: Show users where matches occurred
  // EXAMPLE: "The quick <em>brown</em> fox"
  bool highlight = 7;

  // Fuzzy matching tolerance (0.0 = exact, 1.0 = very fuzzy).
  // USAGE: Handle typos and variations
  // RANGE: 0.0 to 1.0
  // EXAMPLE: 0.8 = allow small typos
  // DEFAULT: 0.0 (exact match)
  float fuzzy_threshold = 8;

  // Minimum relevance score threshold.
  // USAGE: Filter out low-quality matches
  // RANGE: 0.0 to 1.0
  // EXAMPLE: 0.5 = only return results with >50% relevance
  float min_score = 9;
}

// =============================================================================
// SEARCH RESPONSE
// =============================================================================

// SearchResponse provides search results with metadata.
//
// USAGE:
// - Return search results with pagination
// - Include facets for filtering
// - Provide relevance scores
message SearchResponse {
  // Search result items (generic structure).
  // USAGE: Actual search results
  // NOTE: Use google.protobuf.Any or specific message types
  // STRUCTURE: Array of matching entities
  repeated SearchResult results = 1;

  // Pagination metadata.
  // USAGE: Navigate through result pages
  PaginationResponse pagination = 2;

  // Facet aggregations for result refinement.
  // USAGE: Show available filters and counts
  // EXAMPLE:
  //   - "category": {"electronics": 25, "books": 15}
  //   - "brand": {"Apple": 10, "Samsung": 8}
  map<string, FacetResult> facets = 3;

  // Total time taken to execute search (in milliseconds).
  // USAGE: Performance monitoring, user feedback
  int32 search_time_ms = 4;

  // Maximum relevance score in results.
  // USAGE: Normalize scores, assess result quality
  float max_score = 5;

  // Search query that was executed (may differ from input after processing).
  // USAGE: Show users what was actually searched
  // EXAMPLE: Original "iphone" â†’ Processed "iphone OR iPhone OR IPHONE"
  string executed_query = 6;
}

// SearchResult represents a single search result item.
message SearchResult {
  // Entity identifier.
  string id = 1;

  // Entity type or index name.
  // EXAMPLE: "user", "product", "document"
  string type = 2;

  // Relevance score (higher = more relevant).
  // RANGE: 0.0 to 1.0 (normalized)
  float score = 3;

  // Result data (use specific message types in practice).
  // USAGE: Actual entity data
  map<string, string> data = 4;

  // Highlighted snippets showing matches.
  // USAGE: Show users where query matched
  // EXAMPLE: {"title": "The quick <em>brown</em> fox"}
  map<string, string> highlights = 5;
}

// FacetResult represents aggregated counts for a facet.
message FacetResult {
  // Facet value counts.
  // USAGE: Show filter options with counts
  // EXAMPLE: {"active": 150, "inactive": 25}
  map<string, int64> buckets = 1;

  // Total number of distinct values.
  int32 total_values = 2;
}
